{"version":3,"sources":["components/CodeContent.js","helpers/strategies.js","components/Editor.js","components/Problem.js","helpers/default_problems.js","helpers/descriptions.js","components/Problems.js","components/Navbar.js","components/Test.js","helpers/default_editors.js","helpers/test_params.js","components/App.js","serviceWorker.js","index.js"],"names":["Component","variableNames","KEYWORD_REGEX","OBJECT_REGEX","METHOD_REGEX","FUNCTION_REGEX","STRING_REGEX","WALL_REGEX","VARIABLE_REGEX","COMMENT_REGEX","findWithRegex","regex","contentBlock","callback","matchArr","start","message","arguments","length","undefined","text","getText","exec","index","compositeDecorator","Draft","strategy","contentState","component","props","react","style","color","children","variable","decoratedText","split","includes","push","createWithRawContent","hasCommandModifier","rawSampleJson","createWithContent","Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveEditorState","state","editorState","getCurrentContent","rawJson","handleSaveEditor","problemIndex","getSavedEditorState","setLineNums","lineNums","getBlocksAsArray","setState","JSON","stringify","getPlainText","getNewSelection","offset","focusOffset","getSelection","merge","anchorOffset","setSelection","newSelection","newEditorState","forceSelection","editorStateChanged","reverseTab","lengthOfSelect","lengthOfReverse","currentState","oldFocus","getStartOffset","oldOffset","newOffset","newFocus","oldSelection","newContentState","moveText","checkForEndKey","lineNum","getCurrentLine","possibleKeyword","getLineText","replace","getCurrentWord","result","pop","checkForKeys","checkPossibleSuggestions","splitCurrentBlock","splitBlock","handleReturn","offNum","newScopeStarted","lastWasReturn","spaces","findScopeIndentationOfLine","replaceText","handleTab","e","possibleSuggestions","preventDefault","currentWord","sugg","restOfWord","substring","currentBlockKey","getStartKey","getBlockMap","keySeq","findIndex","k","i","lineText","lineStartedScope","lineEndedScope","prevLine","match","content","lastWasD","unIndentLine","currentLine","indentLength","search","suggestions","forEach","handleSave","console","log","axios","post","problem_index","then","response","data","catch","error","keyBindingFn","bind","assertThisInitialized","editor","default_editors","firstEditor","prevProps","nextEditorContent","blocks","keyCode","_this2","lineNumsOutput","className","key","toString","onChange","onTab","onClick","handleRunCode","React","handleClick","selected","selectedStyle","react_default","a","createElement","concat","problemName","default_problems","problem_names","descriptions","example","handleProblemChange","clickedProblem","problems","map","problem","Problem_Editor","Navbar","SetSelectionForm","_this3","htmlFor","type","id","placeholder","value","Number","parseInt","target","entityMap","depth","entityRanges","testInputs","testDescriptions","expectedOutputs","App","currentEditor","pid","currentProblem","function_name","toLowerCase","formatCodeOutput","codeOutput","tests","output","test","testInput","testDescription","testOutput","expectedOutput","testColor","newIndex","_this$state","savedTests","newSavedTests","slice","newOutput","editorToSave","editors","savedEditors","components_Navbar","Problems_Editor","Editor_Editor","Boolean","window","location","hostname","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.491316ee.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport '../css/CodeContent.css';\n\n\nclass CodeContent extends Component {\n  constructor(){\n    super()\n    this.contentEditable = React.createRef();\n    this.state = {\n      html: \"def test_function() <br/>  Your code here.<br/><br/>end\",\n      lines: 4\n    }\n  }\n\n  handleChange = evt => {\n    console.log(evt.target)\n    let newLineCount = this.checkLines(evt.target.value)\n    this.setState({ html: evt.target.value, lines: newLineCount});\n  };\n\n  handleKeyDown = evt => {\n    if(evt.key === 'Tab'){\n      evt.preventDefault();\n      // currentSpot = this.findCurrentSpot(this.state.html)\n    }\n  }\n\n  findCurrentSpot = html => {\n\n  }\n\n  checkLines = html => {\n    let currentLines = 0;\n    let htmlSeq = html.split('')\n    htmlSeq.forEach(function(char, idx){\n      if(char === '<'){\n        if(idx + 3 < htmlSeq.length && htmlSeq[idx+1] === 'b' && htmlSeq[idx+2] === 'r' && htmlSeq[idx+3] === '>'){\n          ++currentLines;\n        }\n      }\n    })\n    return currentLines+1; //add one for the last line\n  }\n\n  render = () =>{\n    const lineNums = [];\n    for(let i = 1; i <= this.state.lines; ++i){\n      lineNums.push(<div className=\"line-number\">{i.toString()}</div>);\n    }\n\n    return (\n      <div className=\"code-container\">\n        <div contentEditable=\"true\" className=\"code-content\" wrap=\"off\" name=\"styled-textarea\" id=\"styled\" onChange={this.handleChange}>\n        def test_function()\n        <br/>  Your code here...<br/><br/><br/>\n        end\n        </div>\n        <div className=\"side-numbers\">\n        {lineNums}\n        </div>\n      </div>\n    );\n  }\n}\n\n// <ContentEditable\n//          html={this.state.html} // innerHTML of the editable div\n//          disabled={false} // use true to disable edition\n//          onChange={this.handleChange} // handle innerHTML change\n//        />\n\nexport default CodeContent;\n","import * as React from \"react\";\nimport * as Draft from \"draft-js\";\n\nexport const variableNames = [];\nconst KEYWORD_REGEX = /\\b(def|end|if|do|elsif|else|while|for|return|puts|print|p)\\b/g;\nconst OBJECT_REGEX = /\\b([a-z]|[A-Z])+\\./g;\nconst METHOD_REGEX = /\\.([a-z]|[A-Z])+\\b/g;\nconst FUNCTION_REGEX = /(\\b|\\.)([a-z]|[A-Z]|\\_)+\\(/g;\nconst STRING_REGEX = /\"([a-z]|[A-Z])+\"/g;\nconst WALL_REGEX = /\\|([a-z]|[A-Z])+\\|/g;\nconst VARIABLE_REGEX = /\\b(\\_|[a-z]|[0-9]|[A-Z])+( |)\\= /g;\nconst COMMENT_REGEX = /#.*/g;\n\nconst KeywordSpan = props => {\n  return <span style={{ color: \"purple\" }}>{props.children}</span>;\n};\n\nconst ObjectSpan = props => {\n  return <span style={{ color: \"black\" }}>{props.children}</span>;\n};\n\nconst MethodSpan = props => {\n  return <span style={{ color: \"red\" }}>{props.children}</span>;\n};\n\nconst FunctionSpan = props => {\n  return <span style={{ color: \"blue\" }}>{props.children}</span>;\n};\n\nconst StringSpan = props => {\n  return <span style={{ color: \"green\" }}>{props.children}</span>;\n};\n\nconst WallSpan = props => {\n  return <span style={{ color: \"green\" }}>{props.children}</span>;\n};\n\nconst VariableSpan = props => {\n  const variable = props.decoratedText.split(\" \")[0];\n  if (!variableNames.includes(variable)) variableNames.push(variable);\n  return <span style={{ color: \"black\" }}>{props.children}</span>;\n};\n\nconst CommentSpan = props => {\n  return <span style={{ color: \"teal\" }}>{props.children}</span>;\n};\n\n\nfunction keywordStrategy(contentBlock, callback, contentState) {\n  findWithRegex(KEYWORD_REGEX, contentBlock, callback);\n}\n\nfunction objectStrategy(contentBlock, callback, contentState) {\n  findWithRegex(OBJECT_REGEX, contentBlock, callback, \"subtract\");\n}\n\nfunction methodStrategy(contentBlock, callback, contentState) {\n  findWithRegex(METHOD_REGEX, contentBlock, callback, \"add\");\n}\n\nfunction functionStrategy(contentBlock, callback, contentState) {\n  findWithRegex(FUNCTION_REGEX, contentBlock, callback, \"function\");\n}\n\nfunction stringStrategy(contentBlock, callback, contentState) {\n  findWithRegex(STRING_REGEX, contentBlock, callback, \"\");\n}\n\nfunction wallStrategy(contentBlock, callback, contentState) {\n  findWithRegex(WALL_REGEX, contentBlock, callback, \"\");\n}\n\nfunction variableStrategy(contentBlock, callback, contentState) {\n  findWithRegex(VARIABLE_REGEX, contentBlock, callback, \"\");\n}\n\nfunction commentStrategy(contentBlock, callback, contentState) {\n  findWithRegex(COMMENT_REGEX, contentBlock, callback, \"\");\n}\n\nfunction findWithRegex(regex, contentBlock, callback, message = \"\") {\n  const text = contentBlock.getText();\n  let matchArr, start;\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index;\n    if (message === \"add\") {\n      callback(start + 1, start + 1 + matchArr[0].length - 1);\n    } else if (message === \"subtract\") {\n      callback(start, start + matchArr[0].length - 1);\n    } else if (message === \"function\") {\n      if (matchArr[0] && matchArr[0][0] && matchArr[0][0] === \".\") {\n        ++start;\n        callback(start, start + matchArr[0].length - 2);\n      } else {\n        callback(start, start + matchArr[0].length - 1);\n      }\n    } else {\n      callback(start, start + matchArr[0].length);\n    }\n  }\n}\n\nexport const compositeDecorator = new Draft.CompositeDecorator([\n  {\n    strategy: commentStrategy,\n    component: CommentSpan\n  },\n  {\n    strategy: keywordStrategy,\n    component: KeywordSpan\n  },\n  {\n    strategy: functionStrategy,\n    component: FunctionSpan\n  },\n  {\n    strategy: methodStrategy,\n    component: MethodSpan\n  },\n  {\n    strategy: objectStrategy,\n    component: ObjectSpan\n  },\n  {\n    strategy: stringStrategy,\n    component: StringSpan\n  },\n  {\n    strategy: wallStrategy,\n    component: WallSpan\n  },\n  {\n    strategy: variableStrategy,\n    component: VariableSpan\n  },\n]);\n","import * as React from \"react\";\nimport * as Draft from \"draft-js\";\nimport axios from 'axios'\nimport \"../css/CodeContent.css\";\nimport {variableNames, compositeDecorator} from '../helpers/strategies.js'\n\nconst { hasCommandModifier } = Draft.KeyBindingUtil;\n\n\n\nconst createWithRawContent = rawSampleJson => {\n  const contentState = Draft.convertFromRaw(rawSampleJson);\n  const newEditorState = Draft.EditorState.createWithContent(\n    contentState,\n    compositeDecorator\n  );\n  return newEditorState;\n};\n\n\n\nexport default class Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.keyBindingFn = this.keyBindingFn.bind(this);\n\n    const editor = this.props.default_editors[this.props.problemIndex];\n    const firstEditor = createWithRawContent(editor)\n\n    this.state = {\n      // editorState: Draft.EditorState.createEmpty(compositeDecorator),\n      editorState: firstEditor,\n      lineNums: 0,\n      text: \"\",\n      lastWasReturn: false,\n      lastWasD: true,\n      possibleSuggestions: variableNames,\n      problemIndex: this.props.problemIndex\n    };\n\n    this.getSavedEditorState();\n  }\n\n\n  componentDidUpdate(prevProps){\n    if(prevProps.problemIndex !== this.props.problemIndex){\n      this.saveEditorState()\n      const editor = this.props.default_editors[this.props.problemIndex];\n      const nextEditorContent = createWithRawContent(editor)\n      this.setState({\n        editorState: nextEditorContent,\n        lineNums: editor.blocks.length,\n        problemIndex: this.props.problemIndex\n      }, this.getSavedEditorState());\n    }\n  }\n\n  componentDidUnmount(){\n    this.saveEditorState()\n  }\n\n  saveEditorState = () => {\n      const contentState = this.state.editorState.getCurrentContent();\n      const rawJson = Draft.convertToRaw(contentState);\n      this.props.handleSaveEditor(rawJson, this.state.problemIndex)\n      // axios.post('http://localhost:3000/contents', ({content: rawJson, problem_index: this.state.problemIndex}))\n      // .then(response => {\n      //   console.log(response.data)\n      // })\n      // .catch(error => console.log(error))\n  }\n\n  getSavedEditorState = () => {\n    // axios.get(`http://localhost:3000/problem?problem_index=${this.props.problemIndex}`)\n    // .then(response => {\n    //   let newEditor;\n    //   let editor;\n    //   if(response.data.length){\n    //     console.log('resp', response.data)\n    //     editor = response.data[response.data.length-1].content\n    //     newEditor = createWithRawContent(editor)\n    //     const lineNums = (editor.blocks) ? editor.blocks.length: 0\n    //     this.setState({\n    //       editorState: newEditor,\n    //       lineNums: editor.blocks.length\n    //     })\n    //   }\n    //\n    // })\n    // .catch(error => console.log(error))\n  }\n\n\n  setLineNums = () => {\n    const lineNums = this.state.editorState\n      .getCurrentContent()\n      .getBlocksAsArray().length;\n    this.setState({ lineNums: lineNums });\n  };\n\n  contentState = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    const rawJson = Draft.convertToRaw(contentState);\n    const jsonStr = JSON.stringify(rawJson, null, 1);\n    const plainText = contentState.getPlainText();\n  };\n\n  getNewSelection = (offset, focusOffset) => {\n    const { editorState } = this.state;\n    const selectionState = editorState.getSelection();\n    return selectionState.merge({\n      anchorOffset: offset,\n      focusOffset: focusOffset\n    });\n  };\n\n  setSelection = (offset: number, focusOffset: number) => {\n    const { editorState } = this.state;\n    const selectionState = editorState.getSelection();\n\n    const newSelection = selectionState.merge({\n      anchorOffset: offset,\n      focusOffset: focusOffset\n    });\n\n    const newEditorState = Draft.EditorState.forceSelection(\n      editorState,\n      newSelection\n    );\n    this.editorStateChanged(newEditorState);\n  };\n\n  reverseTab = (lengthOfSelect, lengthOfReverse) => {\n    let currentState = this.state.editorState;\n    let currentSelection = currentState.getSelection();\n    const oldFocus = currentSelection.getStartOffset();\n    const oldOffset = oldFocus - lengthOfSelect;\n\n    const newOffset = oldOffset - lengthOfReverse < 0 ? 0 : oldOffset - lengthOfReverse;\n    const newFocus = newOffset + lengthOfSelect;\n    const oldSelection = this.getNewSelection(oldOffset, oldFocus);\n    const newSelection = this.getNewSelection(newOffset, newFocus);\n\n    let newContentState = Draft.Modifier.moveText(\n      currentState.getCurrentContent(),\n      oldSelection,\n      newSelection\n    );\n\n    this.setState({\n      editorState: Draft.EditorState.push(\n        currentState,\n        newContentState,\n        \"move-text\"\n      )\n    });\n  };\n\n  checkForEndKey = () => {\n    const lineNum = this.getCurrentLine();\n    const lineText = this.getLineText(lineNum);\n    const possibleKeyword = lineText.replace(/\\s/g, \"\");\n    if (possibleKeyword === \"end\") return 3;\n    else if (possibleKeyword === \"elsif\") return 5;\n    else if (possibleKeyword === \"else\") return 4;\n    else return 0;\n  };\n\n  getCurrentWord = () => {\n    let result;\n    if ((result = this.getLineText(this.getCurrentLine())))\n      result = result.split(\" \").pop();\n    return result;\n  };\n\n  keyBindingFn(e: SyntheticKeyboardEvent): string {\n    if (e.keyCode === 68 || e.keyCode === 70 || e.keyCode === 69) {\n      // key: D\n      this.setState({ lastWasD: true });\n      //check if end is only word on line\n    }\n\n    if (e.keyCode === 13) {\n      // key: return\n      this.setState({ lastWasReturn: true });\n    }\n    return Draft.getDefaultKeyBinding(e);\n  }\n\n  editorStateChanged = (newEditorState: Draft.EditorState) => {\n    this.setState(\n      {\n        editorState: newEditorState\n      },\n      () => {\n        this.checkForKeys();\n        this.setLineNums();\n        this.contentState();\n        this.checkPossibleSuggestions();\n      }\n    );\n  };\n\n  splitCurrentBlock = () => {\n    let currentState = this.state.editorState;\n    let newContentState = Draft.Modifier.splitBlock(\n      currentState.getCurrentContent(),\n      currentState.getSelection()\n    ); // need to split the block;\n    this.setState({\n      editorState: Draft.EditorState.push(\n        currentState,\n        newContentState,\n        \"insert-characters\"\n      )\n    });\n  };\n\n\n\n  handleReturn = (offNum, newScopeStarted) => {\n    const lineNum = this.getCurrentLine();\n    this.setState({ lastWasReturn: false });\n\n    let spaces = this.findScopeIndentationOfLine(lineNum);\n    let currentState = this.state.editorState;\n    let newContentState = Draft.Modifier.replaceText(\n      currentState.getCurrentContent(),\n      currentState.getSelection(),\n      spaces\n    );\n\n    this.setState({\n      editorState: Draft.EditorState.push(\n        currentState,\n        newContentState,\n        \"insert-characters\"\n      )\n    });\n  };\n\n  handleTab = e => {\n    const { possibleSuggestions } = this.state;\n    if (e) e.preventDefault();\n    let currentState = this.state.editorState;\n    let newContentState;\n    if (possibleSuggestions.length) {\n      //need to print first in arr\n      const currentWord = this.getCurrentWord();\n      const sugg = possibleSuggestions[0];\n      const restOfWord = sugg.substring(currentWord.length, sugg.length);\n      newContentState = Draft.Modifier.replaceText(\n        currentState.getCurrentContent(),\n        currentState.getSelection(),\n        restOfWord\n      );\n    } else {\n      newContentState = Draft.Modifier.replaceText(\n        currentState.getCurrentContent(),\n        currentState.getSelection(),\n        \"    \"\n      );\n    }\n    this.setState({\n      editorState: Draft.EditorState.push(\n        currentState,\n        newContentState,\n        \"insert-characters\"\n      )\n    });\n  };\n\n  getCurrentLine = () => {\n    const currentBlockKey = this.state.editorState.getSelection().getStartKey();\n    const currentBlockIndex = this.state.editorState\n      .getCurrentContent()\n      .getBlockMap()\n      .keySeq()\n      .findIndex(k => k === currentBlockKey);\n    return currentBlockIndex;\n  };\n\n  findScopeIndentationOfLine = lineNum => {\n    let spaces = \"\"\n    for(let i = 0; i < lineNum; ++i){\n      const lineText = this.getLineText(i)\n      if(this.lineStartedScope(lineText)){\n        spaces += \"    \"\n      }\n      if(this.lineEndedScope(lineText)){\n        if(spaces.length > 0)\n          spaces = spaces.substring(0, spaces.length-4)\n      }\n    }\n    return spaces\n  }\n\n  lineStartedScope = prevLine => {\n    return prevLine.match(/\\b(def|if|while|for|do)\\b/g) !== null;\n  };\n\n  lineEndedScope = prevLine => {\n    return prevLine.match(/\\b(end)\\b/g) !== null;\n  };\n\n  getLineText = lineNum => {\n    let content = this.state.editorState.getCurrentContent().getBlocksAsArray()[\n      lineNum\n    ];\n    if (content) {\n      return content.text;\n    }\n    return null;\n  };\n\n  checkForKeys = () => {\n\n    if (this.state.lastWasReturn) {\n      this.handleReturn();\n    } else if (this.state.lastWasD) {\n      this.setState({ lastWasD: false });\n      const result = this.checkForEndKey();\n      //if found keyword 'end' or 'else, elsif' needs reverse Tab\n      if (result !== 0) {\n        this.unIndentLine(this.getCurrentLine(), result)\n      }\n    }\n  };\n\n  unIndentLine = (currentLine, result) => {\n    let spaces = this.findScopeIndentationOfLine(currentLine);\n    const indentLength = spaces.length - 4 < 0 ? 0: spaces.length - 4;\n    const lineText = this.getLineText(currentLine)\n    const offset = lineText.search(/\\S/);\n    this.reverseTab(result, offset-indentLength);\n  }\n\n  checkPossibleSuggestions = () => {\n    const currentWord = this.getCurrentWord();\n    if (currentWord === \"\") return;\n    const suggestions = [];\n    variableNames.forEach(function(variable) {\n      if (variable.includes(currentWord)) {\n        suggestions.push(variable);\n      }\n    });\n\n    this.setState({\n      possibleSuggestions: suggestions\n    });\n  };\n\n\n  handleSave = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    const rawJson = Draft.convertToRaw(contentState);\n    console.log('before send', rawJson);\n    axios.post('http://localhost:3000/contents', ({content: rawJson, problem_index: this.state.problemIndex}))\n         .then(response => {\n             console.log(response.data)\n         })\n         .catch(error => console.log(error))\n  }\n\n  render() {\n    const lineNumsOutput = [];\n    const { possibleSuggestions } = this.state;\n    for (let i = 1; i <= this.state.lineNums; ++i) {\n      lineNumsOutput.push(\n        <div className=\"line-number\" key={i.toString()}>\n          {i.toString()}\n        </div>\n      );\n    }\n\n\n    return (\n        <div className=\"editor\">\n          <div className=\"side-numbers\">{lineNumsOutput}</div>\n          <Draft.Editor\n            editorState={this.state.editorState}\n            onChange={this.editorStateChanged}\n            onTab={this.handleTab}\n            keyBindingFn={this.keyBindingFn}\n          />\n\n        <button onClick={() => this.props.handleRunCode(this.state.editorState.getCurrentContent())}>Run Code</button>\n        </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../css/Problems.css\";\n\nexport default class Editor extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: this.props.selected,\n    }\n  }\n\n  componentDidUpdate(prevProps){\n    if(prevProps.selected !== this.props.selected){\n        this.setState({\n            selected: this.props.selected\n        });\n    }\n  }\n\n  handleClick = () => {\n    this.props.callback(this.props.index)\n  }\n\n  render(){\n    const selectedStyle = this.state.selected ? \"selected-item\" : \"\";\n    return (\n      <div className={`problem-list-item ${selectedStyle}`} onClick={() => this.handleClick()}>\n        {this.props.problemName}\n      </div>\n    )\n  }\n}\n","export const default_problems = [\n  \"two_sum\",\n  \"check_palindrome\",\n  \"check_anagram\",\n  \"reverse\"\n]\n\nexport const problem_names = [\n  \"Two Sum\",\n  \"Palindromes\",\n  \"Anagrams\",\n  \"Reverse Array\"\n]\n","export const descriptions = [\n  {\n    content: \"Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\",\n    example: \"Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].\"\n  },\n  \n  {\n    content: \"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. For the purpose of this problem, we define empty string as valid palindrome.\",\n    example: `Input: \"A man, a plan, a canal: Panama\"\nOutput: true`\n  },\n  {\n    content: \"Given two strings s and t , write a function to determine if t is an anagram of s.\",\n    example: `Input: s = \"anagram\", t = \"nagaram\"\nOutput: true`\n  },\n  {\n    content: `Write a function that reverses a string. The input string is given as an array of characters`,\n    example: `Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]`\n  },\n\n\n]\n","import React from \"react\";\nimport Problem from \"./Problem.js\"\nimport \"../css/Problems.css\";\nimport {problem_names} from '../helpers/default_problems'\nimport {descriptions} from '../helpers/descriptions'\n\n\nexport default class Editor extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      problems: problem_names,\n      clickedProblem: 0\n    }\n  }\n\n  handleProblemChange = (index) => {\n    this.setState({\n      clickedProblem: index\n    })\n    this.props.callback(index);\n  }\n\n  render(){\n    return (\n\n      <div className=\"problems-list\">\n        {console.log(this.state.clickedProblem)}\n        {this.state.problems.map((problem, index) => (\n          <Problem\n            callback={this.handleProblemChange}\n            selected={this.state.clickedProblem === index}\n            problemName={this.state.problems[index]}\n            index={index}\n          />\n        ))}\n        <div className=\"problem-description\">\n           <p>\n            {descriptions[this.state.clickedProblem].content}\n           </p>\n           <h5>Example: </h5>\n           <p>\n            {descriptions[this.state.clickedProblem].example}\n           </p>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport '../css/Navbar.css';\n\nclass Navbar extends Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return (\n      <div className=\"navbar\">\n        <div className=\"navbar-items\">\n          <div className=\"logo\">\n            Code Wars\n          </div>\n          <div className=\"navbar-item\">\n\n          </div>\n          <div className=\"navbar-item\">\n\n          </div>\n          \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import * as React from \"react\";\nimport * as Draft from \"draft-js\";\n\nexport default class SelectionStateView extends React.Component {\n  state = {\n    editorState: Draft.EditorState.createEmpty(),\n    offset: 0,\n    endOffset: 0,\n    lastWasD: false\n  };\n\n  editorStateChanged = (newEditorState: Draft.EditorState) => {\n    this.setState({ editorState: newEditorState }, this.checkForDKey);\n  };\n\n  get selectionState() {\n    // the editorState ahs a setSelection() method to get the selection\n    const selectionState = this.state.editorState.getSelection();\n\n    // sample of some data we can get from the selection state\n    const offset = selectionState.getAnchorOffset();\n    const focusOffset = selectionState.getFocusOffset();\n    const isBackwards = selectionState.getIsBackward();\n    return {\n      offset,\n      focusOffset,\n      isBackwards\n    };\n  }\n\n  setSelection = (offset: number, focusOffset: number) => {\n    console.log('offset', offset);\n    console.log('offset Focus', focusOffset);\n    const { editorState } = this.state;\n    const selectionState = editorState.getSelection();\n\n    // we cant set the selection state directly because its immutable.\n    // so make a copy\n    const newSelection = selectionState.merge({\n      anchorOffset: offset,\n      focusOffset: focusOffset\n    })\n\n    // Draft API helper set the selection into a new editorState\n    const newEditorState = Draft.EditorState.forceSelection(editorState, newSelection);\n\n    // update the editorState\n    this.editorStateChanged(newEditorState);\n  };\n\n  checkForDKey = () => {\n    if(this.state.lastWasD){\n      this.setState({lastWasD: false})\n      this.setSelection(3, 5);\n    }\n  }\n\n  keyBindingFn = (e: SyntheticKeyboardEvent): string => {\n    if (e.keyCode === 68) {  // key: D\n      this.setState({lastWasD: true})\n      //check if end is only word on line\n      // if(this.checkForEndKey())\n        // this.reverseTab(2)\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"editor\">\n          <Draft.Editor editorState={this.state.editorState} onChange={this.editorStateChanged}\n          keyBindingFn={this.keyBindingFn}\n\n          />\n        </div>\n\n        <div className=\"form-horizontal col-sm-12\">\n          <div className=\"form-group\">\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              offset\n            </label>\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              {this.selectionState.offset}\n            </label>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              Focus Offset\n            </label>\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              {this.selectionState.focusOffset}\n            </label>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              is backwards\n            </label>\n            <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n              {this.selectionState.isBackwards ? \"true\" : \"false\"}\n            </label>\n          </div>\n          <SetSelectionForm callback={this.setSelection} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass SetSelectionForm extends React.Component {\n  state = {\n    offset: 0,\n    focusOffset: 0\n  };\n  render() {\n    return (\n      <div className=\"selection-form\">\n        <div className=\"form-group\">\n          <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n            offset\n          </label>\n          <div className=\"col-sm-6\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"data\"\n              placeholder=\"data to save\"\n              value={this.state.offset}\n              onChange={e => this.setState({ offset: Number.parseInt(e.target.value) })}\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"data\" className=\"control-label col-sm-6\">\n            end offset\n          </label>\n          <div className=\"col-sm-6\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"data\"\n              placeholder=\"data to save\"\n              value={this.state.focusOffset}\n              onChange={e => this.setState({ focusOffset: Number.parseInt(e.target.value) })}\n            />\n          </div>\n        </div>\n        <button\n          className=\"button col-sm-3 col-sm-offset-8\"\n          onClick={() => this.props.callback(this.state.offset, this.state.focusOffset)}\n        >\n          set selection state\n        </button>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as Draft from \"draft-js\";\n\nexport const default_editors = [\n  {\n    entityMap: {},\n    blocks: [\n      {\n        key: \"5h45a\",\n        text: \"# @param {Interger} count_to\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45b\",\n        text: \"# @return {Null} printed lines\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n\n      {\n        key: \"5h45l\",\n        text: \"def two_sum(arr, target)\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45r\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45x\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45t\",\n        text: \"end\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      }\n    ]\n  },\n  {\n    entityMap: {},\n    blocks: [\n      {\n        key: \"5h45a\",\n        text: \"# @param {Interger} count_to\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45b\",\n        text: \"# @return {Null} printed lines\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45l\",\n        text: \"def check_palindrome(word)\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45r\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45x\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45t\",\n        text: \"end\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      }\n    ]\n  },\n  {\n    entityMap: {},\n    blocks: [\n      {\n        key: \"5h45a\",\n        text: \"# @param {Interger} count_to\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45b\",\n        text: \"# @return {Null} printed lines\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n\n      {\n        key: \"5h45l\",\n        text: \"def check_anagram(mixedWord, word)\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45r\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45x\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45t\",\n        text: \"end\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      }\n    ]\n  },\n  {\n    entityMap: {},\n    blocks: [\n      {\n        key: \"5h45a\",\n        text: \"# @param {Interger array []} arr\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45b\",\n        text: \"# @return {Integer array []}\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45l\",\n        text: \"def reverse(arr)\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45r\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45x\",\n        text: \"    \",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      },\n      {\n        key: \"5h45t\",\n        text: \"end\",\n        type: \"unstyled\",\n        depth: 0,\n        entityRanges: [],\n        data: {}\n      }\n    ]\n  },\n];\n","export const testInputs = [\n  [\"([3, 3, 1], target=6)\", \"([-4, 6, -8, 1], target=-3)\", \"([-3, -2, -1, -9], target=-10)\"],\n  [\"tower\", \"hannah\", \"RACECAR\", \"RaDaR\"],\n  [\"(\\\"eroh\\\", \\\"hero\\\")\", \"(\\\"HleOl\\\", \\\"HellO\\\")\", \"(\\\"not\\\", \\\"aword\\\")\"],\n  [\"[1,2,3]\", \"[1,2,3,4]\", \"[-1, -2, -3]\"]\n\n]\n\nexport const testDescriptions = [\n  [\"All Positive Numbers\", \"Includes Negative Numbers\", \"All Negative\"],\n  [\"Not an Palindrome\", \"All Lowercase Letters\", \"All Uppercase Letters\", \"Mixed Cases\"],\n  [\"All lowercase\", \"Mix of Cases\", \"Not an Anagram\"],\n  [\"Simple increasing array\", \"Jumbled Array\", \"Array with Negative Numbers\"]\n]\n\nexport const expectedOutputs = [\n  [\"[0, 1]\", \"[0, 3]\", \"[2, 3]\"],\n  [\"false\", \"true\", \"true\", \"true\"],\n  [\"true\", \"true\",\"false\"],\n  [\"[3, 2, 1]\", \"[4, 6, 8, 1]\", \"[-3, -2, -1]\"]\n]\n\n// count_to.times do |count|\n//       if count % 3 == 0\n//           print \"Fizz\"\n//       elsif count % 5 == 0\n//           print \"Buzz\"\n//       else\n//           print count\n//       end\n//   end\n","import React, { Component } from \"react\";\nimport \"../css/App.css\";\nimport CodeContent from \"./CodeContent\";\nimport Editor from \"./Editor\";\nimport Problems from \"./Problems\";\nimport * as Draft from \"draft-js\";\nimport axios from 'axios'\nimport Navbar from \"./Navbar\";\nimport Test from \"./Test\";\nimport {default_editors} from '../helpers/default_editors.js'\nimport {default_problems, problem_names} from '../helpers/default_problems.js'\nimport {testInputs, expectedOutputs, testDescriptions} from '../helpers/test_params.js'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      currentProblem: 0,\n      codeOutput: \"\",\n      savedTests: [\"\", \"\", \"\", \"\", \"\"],\n      savedEditors: default_editors\n    }\n  }\n\n  handleRunCode = (currentEditor) => {\n    const rawJson = Draft.convertToRaw(currentEditor);\n    const pid = this.state.currentProblem;\n    console.log('before send', {function_name: default_problems[pid].toLowerCase(), content: rawJson, problem_index: this.state.currentProblem});\n    axios.post('http://localhost:3000/run', ({function_name: default_problems[pid].toLowerCase(), content: rawJson, problem_index: this.state.currentProblem}))\n         .then(response => {\n           console.log('response ', response.data);\n           // this.setState({ codeOutput: response.data })\n           this.formatCodeOutput(response.data)\n         })\n         .catch(error => {\n          this.setState({ codeOutput: \"error\" })\n           console.log('error', error.response)\n         })\n  }\n\n  formatCodeOutput = (tests) => {\n    let output = []\n\n    tests.forEach((test, index) => {\n      let testInput = testInputs[this.state.currentProblem][index];\n      let testDescription = testDescriptions[this.state.currentProblem][index]\n      let testOutput = test ? test: \"No output or return statement\";\n      let expectedOutput = expectedOutputs[this.state.currentProblem][index];\n      console.log(\"testOutput\", testOutput);\n      console.log(\"expectedOutput\", expectedOutput);\n      console.log(\"testOutput\", typeof testOutput);\n      console.log(\"expectedOutput\", typeof expectedOutput);\n      console.log(\"equal = \", expectedOutput == testOutput);\n      const testColor = expectedOutput == testOutput ? \"green\": \"red\"\n\n      output.push(<p >Test Description: {testDescription}</p>)\n      output.push(<p >Input: {testInput}</p>)\n      output.push(<p style={{color: testColor}}>Expected Output: {expectedOutput}</p>)\n      output.push(<p style={{color: testColor}}>Output: {testOutput}</p>)\n      output.push(<br/>)\n    })\n    this.setState({ codeOutput: output})\n  }\n\n\n  handleProblemChange = (newIndex) => {\n    const {currentProblem, savedTests, codeOutput} = this.state\n    const newSavedTests = savedTests.slice()\n    newSavedTests[currentProblem] = codeOutput\n    const newOutput = savedTests[newIndex]\n    this.setState({\n      currentProblem: newIndex,\n      codeOutput: newOutput,\n      savedTests: newSavedTests\n    })\n  }\n\n  handleSaveEditor = (editorToSave, problemIndex) => {\n    const editors = this.state.savedEditors.slice()\n    editors[problemIndex] = editorToSave\n    this.setState({\n      savedEditors: editors\n    })\n  }\n\n        // <CodeRunner  savedTests={this.state.savedTests[this.state.currentProblem]} codeOutput={this.state.codeOutput} />\n  render(){\n    return (\n      <div className=\"container\">\n        <Navbar />\n        <Problems callback={this.handleProblemChange}/>\n        <Editor handleRunCode={this.handleRunCode}\n          default_editors={this.state.savedEditors}\n          handleSaveEditor={this.handleSaveEditor}\n          problemIndex={this.state.currentProblem}/>\n          <div className=\"code-runner\">\n            <div className=\"test-output\">\n              {this.state.codeOutput ? this.state.codeOutput: (<span style={{color: \"grey\"}}>Run some code to display tests</span>)}\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}